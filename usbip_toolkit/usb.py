from enum import IntEnum

from usbip_toolkit.util import bit_reverse


# fmt: off
class PID(IntEnum):
    TOK_OUT   = 0b0001 # 1
    TOK_IN    = 0b1001 # 9
    TOK_SOF   = 0b0101 # 5
    TOK_SETUP = 0b1101 # d
    DAT_DATA0 = 0b0011 # 3
    DAT_DATA1 = 0b1011 # b
    DAT_DATA2 = 0b0111 # 7
    DAT_MDATA = 0b1111 # f
    HND_ACK   = 0b0010 # 2
    HND_NACK  = 0b1010 # a
    HND_STALL = 0b1110 # e
    HND_NYET  = 0b0110 # 6
    SPC_PRE   = 0b1100 # c
    SPC_ERR   = 0b1100 # c
    SPC_SPLIT = 0b1000 # 8
    SPC_PING  = 0b0100 # 4
# fmt: on


def crc5(val, nbits):
    assert val.bit_length() <= nbits
    poly = 0x05 << (nbits - 5)
    crc = 0x1F << (nbits - 5)
    mask = (1 << nbits) - 1
    top_bit = 1 << (nbits - 1)

    for i in range(nbits):
        if (val ^ crc) & top_bit:
            crc = (crc << 1) & mask
            crc ^= poly
        else:
            crc = (crc << 1) & mask
        val = (val << 1) & mask
    crc >>= nbits - 5
    crc ^= 0x1F
    return crc


# fmt: off
_crc16_table = [
        0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
        0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
        0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
        0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
        0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
        0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
        0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
        0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
        0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
        0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
        0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
        0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
        0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
        0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
        0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
        0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101, 
        0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
        0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
        0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
        0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
        0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
        0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
        0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
        0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
        0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
        0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
        0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
        0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
        0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
]

_bitrev_table = [
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
]
# fmt: on


def crc16(buf):
    crc = 0xFFFF
    for b in buf:
        i = ((crc >> 8) ^ b) & 0xFF
        crc = ((crc << 8) & 0xFFFF) ^ _crc16_table[i]
    crc ^= 0xFFFF
    # crc = (bit_reverse(crc >> 8, 8) << 8) | bit_reverse(crc & 0xff, 8)
    crc = (_bitrev_table[crc >> 8] << 8) | _bitrev_table[crc & 0xFF]
    # crc = bytes([_bitrev_table[crc & 0xFF], _bitrev_table[crc >> 8]])
    return crc


def crc162(buf):
    crc = 0xFFFF
    for b in buf:
        i = ((crc >> 8) ^ b) & 0xFF
        crc = ((crc << 8) & 0xFFFF) ^ _crc16_table[i]
    crc ^= 0xFFFF
    crc = (_bitrev_table[crc >> 8] << 8) | _bitrev_table[crc & 0xFF]
    # crc = bytes([_bitrev_table[crc & 0xFF], _bitrev_table[crc >> 8]])
    return crc


def pid_val(pid):
    assert 0 <= pid <= 0xF
    return ((pid ^ 0xF) << 4) | pid


def pid_byte(pid):
    return bytes([pid_val(pid)])


def token_addr_packet(pid, addr, endp):
    assert 0 <= addr <= 0x7F
    assert 0 <= endp <= 0xF
    mid_byte = ((endp & 1) << 7) | addr
    val4crc = bit_reverse((endp << 7) | addr, 11)
    crc_val = crc5(val4crc, 11)
    last_byte = (bit_reverse(crc_val, 5) << 3) | (endp >> 1)
    return bytes([pid_val(pid), mid_byte, last_byte])


def out_packet(addr, endp):
    return token_addr_packet(PID.TOK_OUT, addr, endp)


def in_packet(addr, endp):
    return token_addr_packet(PID.TOK_IN, addr, endp)


def sof_packet(num):
    assert 0 <= num < (1 << 11)
    mid_byte = num & 0xFF
    val4crc = bit_reverse(num, 11)
    crc_val = crc5(val4crc, 11)
    last_byte = (bit_reverse(crc_val, 5) << 3) | (num >> 8)
    return bytes([pid_val(PID.TOK_SOF), mid_byte, last_byte])


def setup_packet(addr, endp):
    return token_addr_packet(PID.TOK_SETUP, addr, endp)


def data_packet(buf, odd=False):
    pb = pid_byte(PID.DAT_DATA1 if odd else PID.DAT_DATA0)
    print(f"pb: {pb.hex()}")
    return (pb + buf + crc16(buf)), not odd


def ack_packet():
    return pid_byte(PID.HND_ACK)


def nack_packet():
    return pid_byte(PID.HND_NACK)


def stall_packet():
    return pid_byte(PID.HND_STALL)


def nyet_packet():
    return pid_byte(PID.HND_NYET)
